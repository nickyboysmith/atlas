//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IAM.Atlas.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Atlas_DevEntities : DbContext
    {
        public Atlas_DevEntities()
            : base("name=Atlas_DevEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Organisation> Organisations { get; set; }
        public virtual DbSet<OrganisationUser> OrganisationUsers { get; set; }
        public virtual DbSet<ScriptLog> ScriptLogs { get; set; }
        public virtual DbSet<DashboardColumn> DashboardColumns { get; set; }
        public virtual DbSet<DashboardGroupItem> DashboardGroupItems { get; set; }
        public virtual DbSet<DashboardGroupUser> DashboardGroupUsers { get; set; }
        public virtual DbSet<DashboardReport> DashboardReports { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<ReportCategory> ReportCategories { get; set; }
        public virtual DbSet<ReportChart> ReportCharts { get; set; }
        public virtual DbSet<ReportChartColumn> ReportChartColumns { get; set; }
        public virtual DbSet<ReportDataGrid> ReportDataGrids { get; set; }
        public virtual DbSet<ReportExportOption> ReportExportOptions { get; set; }
        public virtual DbSet<ReportsReportCategory> ReportsReportCategories { get; set; }
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<ClientEmail> ClientEmails { get; set; }
        public virtual DbSet<ClientNote> ClientNotes { get; set; }
        public virtual DbSet<ClientOrganisation> ClientOrganisations { get; set; }
        public virtual DbSet<ClientPhone> ClientPhones { get; set; }
        public virtual DbSet<PhoneType> PhoneTypes { get; set; }
        public virtual DbSet<UserPreviousId> UserPreviousIds { get; set; }
        public virtual DbSet<ClientPreviousId> ClientPreviousIds { get; set; }
        public virtual DbSet<Dashboard> Dashboards { get; set; }
        public virtual DbSet<DashboardGroup> DashboardGroups { get; set; }
        public virtual DbSet<ClientLocation> ClientLocations { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<DataView> DataViews { get; set; }
        public virtual DbSet<DataViewColumn> DataViewColumns { get; set; }
        public virtual DbSet<ReportDataGridColumn> ReportDataGridColumns { get; set; }
        public virtual DbSet<UserFeedback> UserFeedbacks { get; set; }
        public virtual DbSet<OrganisationAdminUser> OrganisationAdminUsers { get; set; }
        public virtual DbSet<OrganisationReport> OrganisationReports { get; set; }
        public virtual DbSet<OrganisationReportCategory> OrganisationReportCategories { get; set; }
        public virtual DbSet<ReportOwner> ReportOwners { get; set; }
        public virtual DbSet<SystemAdminUser> SystemAdminUsers { get; set; }
        public virtual DbSet<UserReport> UserReports { get; set; }
        public virtual DbSet<Email> Emails { get; set; }
        public virtual DbSet<SearchHistoryInterface> SearchHistoryInterface { get; set; }
        public virtual DbSet<SearchHistoryItem> SearchHistoryItem { get; set; }
        public virtual DbSet<SearchHistoryUser> SearchHistoryUser { get; set; }
        public virtual DbSet<ClientPayment> ClientPayment { get; set; }
        public virtual DbSet<ClientPaymentLink> ClientPaymentLink { get; set; }
        public virtual DbSet<ClientPaymentNote> ClientPaymentNote { get; set; }
        public virtual DbSet<OrganisationPaymentType> OrganisationPaymentType { get; set; }
        public virtual DbSet<Payment> Payment { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethod { get; set; }
        public virtual DbSet<PaymentType> PaymentType { get; set; }
        public virtual DbSet<UserMenuFavourite> UserMenuFavourite { get; set; }
        public virtual DbSet<UserMenuOption> UserMenuOption { get; set; }
        public virtual DbSet<OrganisationDisplay> OrganisationDisplay { get; set; }
        public virtual DbSet<SystemFont> SystemFont { get; set; }
        public virtual DbSet<CourseNote> CourseNote { get; set; }
        public virtual DbSet<CourseNoteType> CourseNoteType { get; set; }
        public virtual DbSet<CourseType> CourseType { get; set; }
        public virtual DbSet<Venue> Venue { get; set; }
        public virtual DbSet<VenueAddress> VenueAddress { get; set; }
        public virtual DbSet<VenueCost> VenueCost { get; set; }
        public virtual DbSet<VenueCostType> VenueCostType { get; set; }
        public virtual DbSet<VenueCourseType> VenueCourseType { get; set; }
        public virtual DbSet<VenueDirections> VenueDirections { get; set; }
        public virtual DbSet<VenueEmail> VenueEmail { get; set; }
        public virtual DbSet<Area> Area { get; set; }
        public virtual DbSet<OrganisationRegion> OrganisationRegion { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<NoteType> NoteType { get; set; }
        public virtual DbSet<StandardCourseType> StandardCourseType { get; set; }
        public virtual DbSet<CoursePreviousId> CoursePreviousId { get; set; }
        public virtual DbSet<Course> Course { get; set; }
        public virtual DbSet<CourseDate> CourseDate { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<MessageAcknowledgement> MessageAcknowledgement { get; set; }
        public virtual DbSet<MessageCategory> MessageCategory { get; set; }
        public virtual DbSet<MessageRecipient> MessageRecipient { get; set; }
        public virtual DbSet<MessageRecipientException> MessageRecipientException { get; set; }
        public virtual DbSet<MessageRecipientOrganisation> MessageRecipientOrganisation { get; set; }
        public virtual DbSet<MessageRecipientOrganisationException> MessageRecipientOrganisationException { get; set; }
        public virtual DbSet<MessageSchedule> MessageSchedule { get; set; }
        public virtual DbSet<AdministrationMenuGroupItem> AdministrationMenuGroupItem { get; set; }
        public virtual DbSet<AdministrationMenuItem> AdministrationMenuItem { get; set; }
        public virtual DbSet<AdministrationMenuItemUser> AdministrationMenuItemUser { get; set; }
        public virtual DbSet<AdministrationMenuUser> AdministrationMenuUser { get; set; }
        public virtual DbSet<CourseVenue> CourseVenue { get; set; }
        public virtual DbSet<CourseSchedule> CourseSchedule { get; set; }
        public virtual DbSet<CourseTrainer> CourseTrainer { get; set; }
        public virtual DbSet<DriverLicenceType> DriverLicenceType { get; set; }
        public virtual DbSet<Trainer> Trainer { get; set; }
        public virtual DbSet<TrainerCourseType> TrainerCourseType { get; set; }
        public virtual DbSet<TrainerEmail> TrainerEmail { get; set; }
        public virtual DbSet<TrainerLicence> TrainerLicence { get; set; }
        public virtual DbSet<TrainerLocation> TrainerLocation { get; set; }
        public virtual DbSet<TrainerNote> TrainerNote { get; set; }
        public virtual DbSet<TrainerOrganisation> TrainerOrganisation { get; set; }
        public virtual DbSet<TrainerPhone> TrainerPhone { get; set; }
        public virtual DbSet<ClientLicence> ClientLicence { get; set; }
        public virtual DbSet<ArchivedEmailAttachment> ArchivedEmailAttachment { get; set; }
        public virtual DbSet<ArchivedEmailNote> ArchivedEmailNote { get; set; }
        public virtual DbSet<ArchivedEmailTo> ArchivedEmailTo { get; set; }
        public virtual DbSet<EmailService> EmailService { get; set; }
        public virtual DbSet<EmailServiceEmailCount> EmailServiceEmailCount { get; set; }
        public virtual DbSet<EmailServiceEmailsSent> EmailServiceEmailsSent { get; set; }
        public virtual DbSet<EmailServiceNote> EmailServiceNote { get; set; }
        public virtual DbSet<OrganisationPrefferedEmailService> OrganisationPrefferedEmailService { get; set; }
        public virtual DbSet<ScheduledEmailAttachment> ScheduledEmailAttachment { get; set; }
        public virtual DbSet<ScheduledEmailNote> ScheduledEmailNote { get; set; }
        public virtual DbSet<ScheduledEmailTo> ScheduledEmailTo { get; set; }
        public virtual DbSet<ScheduledReport> ScheduledReport { get; set; }
        public virtual DbSet<ScheduledReportEmailTo> ScheduledReportEmailTo { get; set; }
        public virtual DbSet<ScheduledReportHistory> ScheduledReportHistory { get; set; }
        public virtual DbSet<ScheduledReportParameter> ScheduledReportParameter { get; set; }
        public virtual DbSet<SchedulerControl> SchedulerControl { get; set; }
        public virtual DbSet<PaymentPreviousId> PaymentPreviousId { get; set; }
        public virtual DbSet<ClientPaymentPreviousClientId> ClientPaymentPreviousClientId { get; set; }
        public virtual DbSet<CourseLanguage> CourseLanguage { get; set; }
        public virtual DbSet<Language> Language { get; set; }
        public virtual DbSet<OrganisationLanguage> OrganisationLanguage { get; set; }
        public virtual DbSet<UserPreferences> UserPreferences { get; set; }
        public virtual DbSet<CourseLog> CourseLog { get; set; }
        public virtual DbSet<PublicHoliday> PublicHoliday { get; set; }
        public virtual DbSet<CourseClientPayment> CourseClientPayments { get; set; }
        public virtual DbSet<CourseTypeCategory> CourseTypeCategories { get; set; }
        public virtual DbSet<TrainerCourseTypeCategory> TrainerCourseTypeCategories { get; set; }
        public virtual DbSet<TrainerDatesUnavailable> TrainerDatesUnavailables { get; set; }
        public virtual DbSet<TrainerWeekDaysAvailable> TrainerWeekDaysAvailables { get; set; }
        public virtual DbSet<ClientQuickSearch> ClientQuickSearches { get; set; }
        public virtual DbSet<CourseQuickSearch> CourseQuickSearches { get; set; }
        public virtual DbSet<Note> Notes { get; set; }
        public virtual DbSet<AdministrationMenuGroup> AdministrationMenuGroups { get; set; }
        public virtual DbSet<BlockIP> BlockIPs { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<SystemControl> SystemControls { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<DORSAttendanceLog> DORSAttendanceLogs { get; set; }
        public virtual DbSet<DORSAttendanceState> DORSAttendanceStates { get; set; }
        public virtual DbSet<DORSControl> DORSControls { get; set; }
        public virtual DbSet<DORSLicenceCheckRequest> DORSLicenceCheckRequests { get; set; }
        public virtual DbSet<DORSState> DORSStates { get; set; }
        public virtual DbSet<DORSTransactionHistory> DORSTransactionHistories { get; set; }
        public virtual DbSet<LoginState> LoginStates { get; set; }
        public virtual DbSet<ReferringAuthority> ReferringAuthorities { get; set; }
        public virtual DbSet<ReferringAuthorityContract> ReferringAuthorityContracts { get; set; }
        public virtual DbSet<ReferringAuthorityNote> ReferringAuthorityNotes { get; set; }
        public virtual DbSet<ReferringAuthorityUser> ReferringAuthorityUsers { get; set; }
        public virtual DbSet<SystemState> SystemStates { get; set; }
        public virtual DbSet<LoginSession> LoginSessions { get; set; }
        public virtual DbSet<OrganisationSystemConfiguration> OrganisationSystemConfigurations { get; set; }
        public virtual DbSet<PostalDistrict> PostalDistricts { get; set; }
        public virtual DbSet<DORSConnection> DORSConnections { get; set; }
        public virtual DbSet<DORSConnectionHistory> DORSConnectionHistories { get; set; }
        public virtual DbSet<OrganisationScheduledEmail> OrganisationScheduledEmails { get; set; }
        public virtual DbSet<ScheduledEmailState> ScheduledEmailStates { get; set; }
        public virtual DbSet<SystemScheduledEmail> SystemScheduledEmails { get; set; }
        public virtual DbSet<VenueLocale> VenueLocales { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
        public virtual DbSet<DORSConnectionNotification> DORSConnectionNotifications { get; set; }
        public virtual DbSet<ArchivedSMSNote> ArchivedSMSNotes { get; set; }
        public virtual DbSet<ArchivedSMSToList> ArchivedSMSToLists { get; set; }
        public virtual DbSet<OrganisationPreferredSMSService> OrganisationPreferredSMSServices { get; set; }
        public virtual DbSet<ScheduledSMSNote> ScheduledSMSNotes { get; set; }
        public virtual DbSet<ScheduledSMSTo> ScheduledSMSToes { get; set; }
        public virtual DbSet<SMSService> SMSServices { get; set; }
        public virtual DbSet<SMSServiceMessageCount> SMSServiceMessageCounts { get; set; }
        public virtual DbSet<SMSServiceMessagesSent> SMSServiceMessagesSents { get; set; }
        public virtual DbSet<SMSServiceNote> SMSServiceNotes { get; set; }
        public virtual DbSet<EmailServiceSendingFailure> EmailServiceSendingFailures { get; set; }
        public virtual DbSet<SystemSupportUser> SystemSupportUsers { get; set; }
        public virtual DbSet<EmailServiceCredential> EmailServiceCredentials { get; set; }
        public virtual DbSet<ScheduledEmail> ScheduledEmails { get; set; }
        public virtual DbSet<OrganisationContact> OrganisationContacts { get; set; }
        public virtual DbSet<CourseDateClientAttendance> CourseDateClientAttendances { get; set; }
        public virtual DbSet<CourseDateTrainerAttendance> CourseDateTrainerAttendances { get; set; }
        public virtual DbSet<OrganisationManagement> OrganisationManagements { get; set; }
        public virtual DbSet<AdministrationMenuItemOrganisation> AdministrationMenuItemOrganisations { get; set; }
        public virtual DbSet<CourseReferenceDateFormat> CourseReferenceDateFormats { get; set; }
        public virtual DbSet<CourseReferenceGenerator> CourseReferenceGenerators { get; set; }
        public virtual DbSet<CourseReferenceNumber> CourseReferenceNumbers { get; set; }
        public virtual DbSet<CourseReferencePrefixSuffixSeparator> CourseReferencePrefixSuffixSeparators { get; set; }
        public virtual DbSet<ReportDataType> ReportDataTypes { get; set; }
        public virtual DbSet<ReportParameter> ReportParameters { get; set; }
        public virtual DbSet<SystemStateSummary> SystemStateSummaries { get; set; }
        public virtual DbSet<SystemStateSummaryHistory> SystemStateSummaryHistories { get; set; }
        public virtual DbSet<LoginNumber> LoginNumbers { get; set; }
        public virtual DbSet<PaymentCard> PaymentCards { get; set; }
        public virtual DbSet<PaymentCardLog> PaymentCardLogs { get; set; }
        public virtual DbSet<PaymentCardSupplier> PaymentCardSuppliers { get; set; }
        public virtual DbSet<PaymentCardType> PaymentCardTypes { get; set; }
        public virtual DbSet<TrainerSetting> TrainerSettings { get; set; }
        public virtual DbSet<OrganisationDORSForceContract> OrganisationDORSForceContracts { get; set; }
        public virtual DbSet<OrganisationSMSTemplateMessage> OrganisationSMSTemplateMessages { get; set; }
        public virtual DbSet<PaymentCardProvider> PaymentCardProviders { get; set; }
        public virtual DbSet<PaymentLink> PaymentLinks { get; set; }
        public virtual DbSet<PaymentNote> PaymentNotes { get; set; }
        public virtual DbSet<SMSMessageTag> SMSMessageTags { get; set; }
        public virtual DbSet<OrganisationPaymentProvider> OrganisationPaymentProviders { get; set; }
        public virtual DbSet<OrganisationPaymentProviderCredential> OrganisationPaymentProviderCredentials { get; set; }
        public virtual DbSet<PaymentProvider> PaymentProviders { get; set; }
        public virtual DbSet<ClientDocument> ClientDocuments { get; set; }
        public virtual DbSet<CourseDocument> CourseDocuments { get; set; }
        public virtual DbSet<CourseDocumentTemplate> CourseDocumentTemplates { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<DocumentContainer> DocumentContainers { get; set; }
        public virtual DbSet<DocumentOwner> DocumentOwners { get; set; }
        public virtual DbSet<FileStoragePath> FileStoragePaths { get; set; }
        public virtual DbSet<FileStoragePathOwner> FileStoragePathOwners { get; set; }
        public virtual DbSet<DashboardMeter> DashboardMeters { get; set; }
        public virtual DbSet<OrganisationDashboardMeter> OrganisationDashboardMeters { get; set; }
        public virtual DbSet<UserDashboardMeter> UserDashboardMeters { get; set; }
        public virtual DbSet<ClientOtherRequirement> ClientOtherRequirements { get; set; }
        public virtual DbSet<ClientSpecialRequirement> ClientSpecialRequirements { get; set; }
        public virtual DbSet<SpecialRequirement> SpecialRequirements { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<DORSConnectionNote> DORSConnectionNotes { get; set; }
        public virtual DbSet<DocumentDeleted> DocumentDeleteds { get; set; }
        public virtual DbSet<DocumentMarkedForDelete> DocumentMarkedForDeletes { get; set; }
        public virtual DbSet<ClientMarkedForArchive> ClientMarkedForArchives { get; set; }
        public virtual DbSet<ClientMarkedForDelete> ClientMarkedForDeletes { get; set; }
        public virtual DbSet<ClientOnlineBookingState> ClientOnlineBookingStates { get; set; }
        public virtual DbSet<TrainerDocument> TrainerDocuments { get; set; }
        public virtual DbSet<AllCourseDocument> AllCourseDocuments { get; set; }
        public virtual DbSet<AllCourseTypeDocument> AllCourseTypeDocuments { get; set; }
        public virtual DbSet<AllTrainerDocument> AllTrainerDocuments { get; set; }
        public virtual DbSet<VenueRegion> VenueRegions { get; set; }
        public virtual DbSet<ClientDORSNotification> ClientDORSNotifications { get; set; }
        public virtual DbSet<DORSScheme> DORSSchemes { get; set; }
        public virtual DbSet<CancelledCourse> CancelledCourses { get; set; }
        public virtual DbSet<DORSCancelledCourse> DORSCancelledCourses { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<DashboardMeter_DocumentSummary> DashboardMeter_DocumentSummary { get; set; }
        public virtual DbSet<ClientScheduledEmail> ClientScheduledEmails { get; set; }
        public virtual DbSet<ClientScheduledSM> ClientScheduledSMS { get; set; }
        public virtual DbSet<DocumentTemplate> DocumentTemplates { get; set; }
        public virtual DbSet<ClientMarkedForDeleteCancelled> ClientMarkedForDeleteCancelleds { get; set; }
        public virtual DbSet<EmailsBlockedOutgoing> EmailsBlockedOutgoings { get; set; }
        public virtual DbSet<DORSClientCourseRemoval> DORSClientCourseRemovals { get; set; }
        public virtual DbSet<CourseClientTransferred> CourseClientTransferreds { get; set; }
        public virtual DbSet<DORSClientCourseTransferred> DORSClientCourseTransferreds { get; set; }
        public virtual DbSet<DocumentMarkedForDeleteCancelled> DocumentMarkedForDeleteCancelleds { get; set; }
        public virtual DbSet<OrganisationSystemTaskMessaging> OrganisationSystemTaskMessagings { get; set; }
        public virtual DbSet<SystemTask> SystemTasks { get; set; }
        public virtual DbSet<ReferringAuthorityClient> ReferringAuthorityClients { get; set; }
        public virtual DbSet<ReferringAuthorityDepartment> ReferringAuthorityDepartments { get; set; }
        public virtual DbSet<ReferringAuthorityUserDepartment> ReferringAuthorityUserDepartments { get; set; }
        public virtual DbSet<SMSServiceCredential> SMSServiceCredentials { get; set; }
        public virtual DbSet<DashboardMeterExposure> DashboardMeterExposures { get; set; }
        public virtual DbSet<FreqAskedQuestion> FreqAskedQuestions { get; set; }
        public virtual DbSet<FreqAskedQuestionAnswer> FreqAskedQuestionAnswers { get; set; }
        public virtual DbSet<FreqAskedQuestionAnswerRequest> FreqAskedQuestionAnswerRequests { get; set; }
        public virtual DbSet<FreqAskedQuestionGroup> FreqAskedQuestionGroups { get; set; }
        public virtual DbSet<FreqAskedQuestionGroupCategory> FreqAskedQuestionGroupCategories { get; set; }
        public virtual DbSet<FreqAskedQuestionGroupItem> FreqAskedQuestionGroupItems { get; set; }
        public virtual DbSet<FreqAskedQuestionOwner> FreqAskedQuestionOwners { get; set; }
        public virtual DbSet<EmailServiceCredentialLog> EmailServiceCredentialLogs { get; set; }
        public virtual DbSet<CourseOverBookingNotification> CourseOverBookingNotifications { get; set; }
        public virtual DbSet<ClientIdentifier> ClientIdentifiers { get; set; }
        public virtual DbSet<SchedulerControlNote> SchedulerControlNotes { get; set; }
        public virtual DbSet<OrganisationEmailCount> OrganisationEmailCounts { get; set; }
        public virtual DbSet<DataViewForDocumentTemplate> DataViewForDocumentTemplates { get; set; }
        public virtual DbSet<DataViewForDocumentTemplateViewableColumn> DataViewForDocumentTemplateViewableColumns { get; set; }
        public virtual DbSet<DocumentFromTemplateData> DocumentFromTemplateDatas { get; set; }
        public virtual DbSet<DocumentFromTemplateRequest> DocumentFromTemplateRequests { get; set; }
        public virtual DbSet<DocumentTemplateDataView> DocumentTemplateDataViews { get; set; }
        public virtual DbSet<DocumentTemplateDataViewColumn> DocumentTemplateDataViewColumns { get; set; }
        public virtual DbSet<CourseClientEmailReminder> CourseClientEmailReminders { get; set; }
        public virtual DbSet<CourseClientSMSReminder> CourseClientSMSReminders { get; set; }
        public virtual DbSet<OrganisationEmailTemplateMessage> OrganisationEmailTemplateMessages { get; set; }
        public virtual DbSet<SystemFeatureGroup> SystemFeatureGroups { get; set; }
        public virtual DbSet<SystemFeatureGroupItem> SystemFeatureGroupItems { get; set; }
        public virtual DbSet<SystemFeatureItem> SystemFeatureItems { get; set; }
        public virtual DbSet<SystemFeatureUserNote> SystemFeatureUserNotes { get; set; }
        public virtual DbSet<SystemInformation> SystemInformations { get; set; }
        public virtual DbSet<DORSTrainer> DORSTrainers { get; set; }
        public virtual DbSet<TrainerAccreditation> TrainerAccreditations { get; set; }
        public virtual DbSet<TrainerAvailability> TrainerAvailabilities { get; set; }
        public virtual DbSet<TrainerAvailabilityByMonth> TrainerAvailabilityByMonths { get; set; }
        public virtual DbSet<CourseStencilCourse> CourseStencilCourses { get; set; }
        public virtual DbSet<CourseTypeTolerance> CourseTypeTolerances { get; set; }
        public virtual DbSet<OrganisationSelfConfiguration> OrganisationSelfConfigurations { get; set; }
        public virtual DbSet<CourseDORSForceContract> CourseDORSForceContracts { get; set; }
        public virtual DbSet<OrganisationCourseStencil> OrganisationCourseStencils { get; set; }
        public virtual DbSet<CourseStencil> CourseStencils { get; set; }
        public virtual DbSet<NetcallAgent> NetcallAgents { get; set; }
        public virtual DbSet<NetcallAgentNumberHistory> NetcallAgentNumberHistories { get; set; }
        public virtual DbSet<NetcallErrorLog> NetcallErrorLogs { get; set; }
        public virtual DbSet<NetcallPayment> NetcallPayments { get; set; }
        public virtual DbSet<NetcallRequest> NetcallRequests { get; set; }
        public virtual DbSet<NetcallRequestPreviousId> NetcallRequestPreviousIds { get; set; }
        public virtual DbSet<ScheduledSMSState> ScheduledSMSStates { get; set; }
        public virtual DbSet<ArchivedSM> ArchivedSMS { get; set; }
        public virtual DbSet<ScheduledSM> ScheduledSMS { get; set; }
        public virtual DbSet<OrganisationScheduledSM> OrganisationScheduledSMS { get; set; }
        public virtual DbSet<SystemScheduledSM> SystemScheduledSMS { get; set; }
        public virtual DbSet<CourseClonedCourse> CourseClonedCourses { get; set; }
        public virtual DbSet<CourseCloneRequest> CourseCloneRequests { get; set; }
        public virtual DbSet<VenueImageMap> VenueImageMaps { get; set; }
        public virtual DbSet<LastRunLog> LastRunLogs { get; set; }
        public virtual DbSet<CourseDORSClient> CourseDORSClients { get; set; }
        public virtual DbSet<DORSClientCourseAttendance> DORSClientCourseAttendances { get; set; }
        public virtual DbSet<DORSOffersWithdrawnLog> DORSOffersWithdrawnLogs { get; set; }
        public virtual DbSet<UserChangeLog> UserChangeLogs { get; set; }
        public virtual DbSet<ReferringAuthorityOrganisation> ReferringAuthorityOrganisations { get; set; }
        public virtual DbSet<SystemTrappedError> SystemTrappedErrors { get; set; }
        public virtual DbSet<DORSCourse> DORSCourses { get; set; }
        public virtual DbSet<DORSCourseData> DORSCourseDatas { get; set; }
        public virtual DbSet<DORSForce> DORSForces { get; set; }
        public virtual DbSet<DORSForceContract> DORSForceContracts { get; set; }
        public virtual DbSet<DORSSchemeCourseType> DORSSchemeCourseTypes { get; set; }
        public virtual DbSet<DataImportedFile> DataImportedFiles { get; set; }
        public virtual DbSet<DataImportedFileDataKey> DataImportedFileDataKeys { get; set; }
        public virtual DbSet<DataImportedFileDataValue> DataImportedFileDataValues { get; set; }
        public virtual DbSet<TrainerVenue> TrainerVenues { get; set; }
        public virtual DbSet<TrainerVenueNote> TrainerVenueNotes { get; set; }
        public virtual DbSet<CourseInterpreterLanguage> CourseInterpreterLanguages { get; set; }
        public virtual DbSet<ClientView> ClientViews { get; set; }
        public virtual DbSet<DORSTrainerLicenceState> DORSTrainerLicenceStates { get; set; }
        public virtual DbSet<DORSTrainerScheme> DORSTrainerSchemes { get; set; }
        public virtual DbSet<PostCodeInformation> PostCodeInformations { get; set; }
        public virtual DbSet<TrainerAvailabilityDate> TrainerAvailabilityDates { get; set; }
        public virtual DbSet<TrainerBookingRequest> TrainerBookingRequests { get; set; }
        public virtual DbSet<TrainingSession> TrainingSessions { get; set; }
        public virtual DbSet<ProcessMonitor> ProcessMonitors { get; set; }
        public virtual DbSet<DORSConnectionForRotation> DORSConnectionForRotations { get; set; }
        public virtual DbSet<CourseDORSNotification> CourseDORSNotifications { get; set; }
        public virtual DbSet<DORSTrainerLicenceType> DORSTrainerLicenceTypes { get; set; }
        public virtual DbSet<DORSTrainerLicence> DORSTrainerLicences { get; set; }
        public virtual DbSet<OrganisationPayment> OrganisationPayments { get; set; }
        public virtual DbSet<ClientDORSData> ClientDORSDatas { get; set; }
        public virtual DbSet<PaymentCardTypePaymentMethod> PaymentCardTypePaymentMethods { get; set; }
        public virtual DbSet<DORSLicenceCheckCompleted> DORSLicenceCheckCompleteds { get; set; }
        public virtual DbSet<OrganisationArchiveControl> OrganisationArchiveControls { get; set; }
        public virtual DbSet<ArchivedEmail> ArchivedEmails { get; set; }
        public virtual DbSet<ClientOnlineEmailChangeRequest> ClientOnlineEmailChangeRequests { get; set; }
        public virtual DbSet<ClientOnlineEmailChangeRequestHistory> ClientOnlineEmailChangeRequestHistories { get; set; }
        public virtual DbSet<CourseClientPaymentTransfer> CourseClientPaymentTransfers { get; set; }
        public virtual DbSet<CourseClientTransferRequest> CourseClientTransferRequests { get; set; }
        public virtual DbSet<CourseVenueEmailReason> CourseVenueEmailReasons { get; set; }
        public virtual DbSet<CourseVenueEmail> CourseVenueEmails { get; set; }
        public virtual DbSet<ClientDecryptionRequest> ClientDecryptionRequests { get; set; }
        public virtual DbSet<ClientEncryption> ClientEncryptions { get; set; }
        public virtual DbSet<ClientEncryptionRequest> ClientEncryptionRequests { get; set; }
        public virtual DbSet<CourseGroupEmailRequest> CourseGroupEmailRequests { get; set; }
        public virtual DbSet<TriggerLog> TriggerLogs { get; set; }
        public virtual DbSet<InstructorRole> InstructorRoles { get; set; }
        public virtual DbSet<TrainerInstructorRole> TrainerInstructorRoles { get; set; }
        public virtual DbSet<TrainerVehicle> TrainerVehicles { get; set; }
        public virtual DbSet<TrainerVehicleNote> TrainerVehicleNotes { get; set; }
        public virtual DbSet<TrainerVehicleRemove> TrainerVehicleRemoves { get; set; }
        public virtual DbSet<VehicleType> VehicleTypes { get; set; }
        public virtual DbSet<TrainerBookingLimitationByMonth> TrainerBookingLimitationByMonths { get; set; }
        public virtual DbSet<TrainerBookingSummary> TrainerBookingSummaries { get; set; }
        public virtual DbSet<TrainerBookingLimitationByYear> TrainerBookingLimitationByYears { get; set; }
        public virtual DbSet<CourseSessionAllocation> CourseSessionAllocations { get; set; }
        public virtual DbSet<CourseDocumentRequest> CourseDocumentRequests { get; set; }
        public virtual DbSet<CourseDocumentRequestType> CourseDocumentRequestTypes { get; set; }
        public virtual DbSet<CourseTypeCategoryFee> CourseTypeCategoryFees { get; set; }
        public virtual DbSet<CourseTypeCategoryRebookingFee> CourseTypeCategoryRebookingFees { get; set; }
        public virtual DbSet<CourseTypeFee> CourseTypeFees { get; set; }
        public virtual DbSet<CourseTypeRebookingFee> CourseTypeRebookingFees { get; set; }
        public virtual DbSet<NetcallOverride> NetcallOverrides { get; set; }
        public virtual DbSet<TrainerGrade> TrainerGrades { get; set; }
        public virtual DbSet<TrainerInsurance> TrainerInsurances { get; set; }
        public virtual DbSet<TrainerVehicleCategory> TrainerVehicleCategories { get; set; }
        public virtual DbSet<VehicleCategory> VehicleCategories { get; set; }
        public virtual DbSet<CourseGroupEmailRequestAttachment> CourseGroupEmailRequestAttachments { get; set; }
        public virtual DbSet<PendingEmailAttachment> PendingEmailAttachments { get; set; }
        public virtual DbSet<CancelledRefund> CancelledRefunds { get; set; }
        public virtual DbSet<Refund> Refunds { get; set; }
        public virtual DbSet<RefundMethod> RefundMethods { get; set; }
        public virtual DbSet<RefundNote> RefundNotes { get; set; }
        public virtual DbSet<RefundPayment> RefundPayments { get; set; }
        public virtual DbSet<RefundType> RefundTypes { get; set; }
        public virtual DbSet<CourseInterpreter> CourseInterpreters { get; set; }
        public virtual DbSet<Interpreter> Interpreters { get; set; }
        public virtual DbSet<InterpreterEmail> InterpreterEmails { get; set; }
        public virtual DbSet<InterpreterLanguage> InterpreterLanguages { get; set; }
        public virtual DbSet<InterpreterLocation> InterpreterLocations { get; set; }
        public virtual DbSet<InterpreterNote> InterpreterNotes { get; set; }
        public virtual DbSet<InterpreterOrganisation> InterpreterOrganisations { get; set; }
        public virtual DbSet<InterpreterPhone> InterpreterPhones { get; set; }
        public virtual DbSet<NetcallOverridePayment> NetcallOverridePayments { get; set; }
        public virtual DbSet<InterpreterAvailabilityDate> InterpreterAvailabilityDates { get; set; }
        public virtual DbSet<ClientOnlineBookingRestriction> ClientOnlineBookingRestrictions { get; set; }
        public virtual DbSet<ClientChangeLog> ClientChangeLogs { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<DashboardMeterCategory> DashboardMeterCategories { get; set; }
        public virtual DbSet<CancelledRefundRequest> CancelledRefundRequests { get; set; }
        public virtual DbSet<RefundRequest> RefundRequests { get; set; }
        public virtual DbSet<RefundRequestNote> RefundRequestNotes { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<TaskCategory> TaskCategories { get; set; }
        public virtual DbSet<TaskCategoryForOrganisation> TaskCategoryForOrganisations { get; set; }
        public virtual DbSet<TaskCompletedForUser> TaskCompletedForUsers { get; set; }
        public virtual DbSet<TaskForOrganisation> TaskForOrganisations { get; set; }
        public virtual DbSet<TaskForUser> TaskForUsers { get; set; }
        public virtual DbSet<TaskNote> TaskNotes { get; set; }
        public virtual DbSet<TaskRelatedToClient> TaskRelatedToClients { get; set; }
        public virtual DbSet<TaskRelatedToCourse> TaskRelatedToCourses { get; set; }
        public virtual DbSet<TaskRelatedToTrainer> TaskRelatedToTrainers { get; set; }
        public virtual DbSet<TaskRemovedFromOrganisation> TaskRemovedFromOrganisations { get; set; }
        public virtual DbSet<TaskRemovedFromUser> TaskRemovedFromUsers { get; set; }
        public virtual DbSet<ClientMysteryShopper> ClientMysteryShoppers { get; set; }
        public virtual DbSet<MysteryShopperAdministrator> MysteryShopperAdministrators { get; set; }
        public virtual DbSet<TaskAction> TaskActions { get; set; }
        public virtual DbSet<TaskActionPriorityForOrganisation> TaskActionPriorityForOrganisations { get; set; }
        public virtual DbSet<DORSSite> DORSSites { get; set; }
        public virtual DbSet<DORSSiteVenue> DORSSiteVenues { get; set; }
        public virtual DbSet<OrganisationDORSSite> OrganisationDORSSites { get; set; }
        public virtual DbSet<VenueDORSValidationRequest> VenueDORSValidationRequests { get; set; }
        public virtual DbSet<CourseLocked> CourseLockeds { get; set; }
        public virtual DbSet<CourseProfileUneditable> CourseProfileUneditables { get; set; }
        public virtual DbSet<ReportRequest> ReportRequests { get; set; }
        public virtual DbSet<ReportRequestParameter> ReportRequestParameters { get; set; }
        public virtual DbSet<ClientReference> ClientReferences { get; set; }
        public virtual DbSet<DashboardMeterData_Client> DashboardMeterData_Client { get; set; }
        public virtual DbSet<DashboardMeterData_Course> DashboardMeterData_Course { get; set; }
        public virtual DbSet<DashboardMeterData_DocumentStat> DashboardMeterData_DocumentStat { get; set; }
        public virtual DbSet<DashboardMeterData_DORSOfferWithdrawn> DashboardMeterData_DORSOfferWithdrawn { get; set; }
        public virtual DbSet<DashboardMeterData_Email> DashboardMeterData_Email { get; set; }
        public virtual DbSet<DashboardMeterData_OnlineClientsSpecialRequirement> DashboardMeterData_OnlineClientsSpecialRequirement { get; set; }
        public virtual DbSet<DashboardMeterData_Payment> DashboardMeterData_Payment { get; set; }
        public virtual DbSet<DashboardMeterData_UnpaidBookedCourse> DashboardMeterData_UnpaidBookedCourse { get; set; }
        public virtual DbSet<DatabaseErrorLog> DatabaseErrorLogs { get; set; }
        public virtual DbSet<PeriodicalSPJob> PeriodicalSPJobs { get; set; }
        public virtual DbSet<DataViewLog> DataViewLogs { get; set; }
        public virtual DbSet<OldLetterAction> OldLetterActions { get; set; }
        public virtual DbSet<OldLetterTemplate> OldLetterTemplates { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<EmailTemplateCategory> EmailTemplateCategories { get; set; }
        public virtual DbSet<EmailTemplateCategoryColumn> EmailTemplateCategoryColumns { get; set; }
        public virtual DbSet<EmailTemplateScheduledEmail> EmailTemplateScheduledEmails { get; set; }
        public virtual DbSet<LetterCategory> LetterCategories { get; set; }
        public virtual DbSet<LetterCategoryColumn> LetterCategoryColumns { get; set; }
        public virtual DbSet<CourseClient> CourseClients { get; set; }
        public virtual DbSet<CourseClientRemoved> CourseClientRemoveds { get; set; }
        public virtual DbSet<LetterTemplate> LetterTemplates { get; set; }
        public virtual DbSet<LetterTemplateDocument> LetterTemplateDocuments { get; set; }
        public virtual DbSet<LetterTemplateDocumentProcessRequest> LetterTemplateDocumentProcessRequests { get; set; }
        public virtual DbSet<ReportDataTypeSelectIdentifier> ReportDataTypeSelectIdentifiers { get; set; }
        public virtual DbSet<OrganisationInterpreterSetting> OrganisationInterpreterSettings { get; set; }
        public virtual DbSet<OrganisationTrainerSetting> OrganisationTrainerSettings { get; set; }
        public virtual DbSet<UniqueCourseTrainerInterpreterReferenceNumber> UniqueCourseTrainerInterpreterReferenceNumbers { get; set; }
        public virtual DbSet<ReportQueue> ReportQueues { get; set; }
        public virtual DbSet<ReportQueueRequest> ReportQueueRequests { get; set; }
        public virtual DbSet<DocumentPrintQueue> DocumentPrintQueues { get; set; }
        public virtual DbSet<TrainerPreviousId> TrainerPreviousIds { get; set; }
        public virtual DbSet<VatRate> VatRates { get; set; }
        public virtual DbSet<C_MigrationDocumentTransferInformation> C_MigrationDocumentTransferInformation { get; set; }
        public virtual DbSet<OrganisationContactCourseType> OrganisationContactCourseTypes { get; set; }
        public virtual DbSet<ClientEmailTemplate> ClientEmailTemplates { get; set; }
        public virtual DbSet<ClientEmailTemplateEmail> ClientEmailTemplateEmails { get; set; }
        public virtual DbSet<TransactionLog> TransactionLogs { get; set; }
        public virtual DbSet<SendSystemAdminsEmail> SendSystemAdminsEmails { get; set; }
        public virtual DbSet<SystemTrainerInformation> SystemTrainerInformations { get; set; }
        public virtual DbSet<SystemTrainerInformationByOrganisation> SystemTrainerInformationByOrganisations { get; set; }
        public virtual DbSet<Reconciliation> Reconciliations { get; set; }
        public virtual DbSet<ReconciliationConfiguration> ReconciliationConfigurations { get; set; }
        public virtual DbSet<ReconciliationData> ReconciliationDatas { get; set; }
        public virtual DbSet<DashboardMeterData_UnableToUpdateInDORS> DashboardMeterData_UnableToUpdateInDORS { get; set; }
        public virtual DbSet<DORSClientCourseAttendanceLog> DORSClientCourseAttendanceLogs { get; set; }
        public virtual DbSet<DashboardMeterData_AttendanceNotUploadedToDORS> DashboardMeterData_AttendanceNotUploadedToDORS { get; set; }
        public virtual DbSet<OrganisationCourse> OrganisationCourses { get; set; }
        public virtual DbSet<PeriodicalSPJobCall> PeriodicalSPJobCalls { get; set; }
        public virtual DbSet<PaymentErrorInformation> PaymentErrorInformations { get; set; }
        public virtual DbSet<PaymentCardValidationType> PaymentCardValidationTypes { get; set; }
        public virtual DbSet<PaymentCardValidationTypeLength> PaymentCardValidationTypeLengths { get; set; }
        public virtual DbSet<PaymentCardValidationTypeVariation> PaymentCardValidationTypeVariations { get; set; }
        public virtual DbSet<OnlineBookingLog> OnlineBookingLogs { get; set; }
        public virtual DbSet<DORSForceRegion> DORSForceRegions { get; set; }
        public virtual DbSet<OrganisationNotificationLog> OrganisationNotificationLogs { get; set; }
        public virtual DbSet<SMSServiceSendingFailure> SMSServiceSendingFailures { get; set; }
        public virtual DbSet<ReconciliationDataComment> ReconciliationDataComments { get; set; }
        public virtual DbSet<ClientArchivedEmail> ClientArchivedEmails { get; set; }
    
        public virtual ObjectResult<uspAuthenticateUserOnEmail_Result> uspAuthenticateUserOnEmail(string userEmail, string userPassword)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAuthenticateUserOnEmail_Result>("uspAuthenticateUserOnEmail", userEmailParameter, userPasswordParameter);
        }
    
        public virtual ObjectResult<uspAuthenticateUserOnId_Result> uspAuthenticateUserOnId(string userId, string userPassword)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAuthenticateUserOnId_Result>("uspAuthenticateUserOnId", userIdParameter, userPasswordParameter);
        }
    
        public virtual int uspDropTableContraints(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDropTableContraints", tableNameParameter);
        }
    
        public virtual int uspLogUseage(string loginId, string browser, string os, string ip, Nullable<bool> success)
        {
            var loginIdParameter = loginId != null ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(string));
    
            var browserParameter = browser != null ?
                new ObjectParameter("Browser", browser) :
                new ObjectParameter("Browser", typeof(string));
    
            var osParameter = os != null ?
                new ObjectParameter("Os", os) :
                new ObjectParameter("Os", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            var successParameter = success.HasValue ?
                new ObjectParameter("Success", success) :
                new ObjectParameter("Success", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogUseage", loginIdParameter, browserParameter, osParameter, ipParameter, successParameter);
        }
    
        public virtual int uspScriptCompleted(string scriptName)
        {
            var scriptNameParameter = scriptName != null ?
                new ObjectParameter("ScriptName", scriptName) :
                new ObjectParameter("ScriptName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspScriptCompleted", scriptNameParameter);
        }
    
        public virtual int uspScriptStarted(string scriptName, string comments)
        {
            var scriptNameParameter = scriptName != null ?
                new ObjectParameter("ScriptName", scriptName) :
                new ObjectParameter("ScriptName", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspScriptStarted", scriptNameParameter, commentsParameter);
        }
    
        public virtual int usp_RefreshAllClientQuickSearchData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RefreshAllClientQuickSearchData");
        }
    
        public virtual int usp_RefreshAllCourseQuickSearchData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RefreshAllCourseQuickSearchData");
        }
    
        public virtual int usp_RefreshSingleClientQuickSearchData(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RefreshSingleClientQuickSearchData", clientIdParameter);
        }
    
        public virtual int usp_RefreshSingleCourseQuickSearchData(Nullable<int> courseId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RefreshSingleCourseQuickSearchData", courseIdParameter);
        }
    
        public virtual int usp_SetUserLogin(string loginId, Nullable<bool> success)
        {
            var loginIdParameter = loginId != null ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(string));
    
            var successParameter = success.HasValue ?
                new ObjectParameter("Success", success) :
                new ObjectParameter("Success", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SetUserLogin", loginIdParameter, successParameter);
        }
    
        public virtual int usp_SystemAccessMonitor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SystemAccessMonitor");
        }
    
        public virtual int usp_UpdateDataViewColumn(Nullable<int> dataViewId, string dataViewName)
        {
            var dataViewIdParameter = dataViewId.HasValue ?
                new ObjectParameter("DataViewId", dataViewId) :
                new ObjectParameter("DataViewId", typeof(int));
    
            var dataViewNameParameter = dataViewName != null ?
                new ObjectParameter("DataViewName", dataViewName) :
                new ObjectParameter("DataViewName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateDataViewColumn", dataViewIdParameter, dataViewNameParameter);
        }
    
        public virtual int uspSystemAccessMonitor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSystemAccessMonitor");
        }
    
        public virtual int spSetPassword(Nullable<int> userId, string password)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSetPassword", userIdParameter, passwordParameter);
        }
    
        public virtual int spSendNewPassword(string loginId)
        {
            var loginIdParameter = loginId != null ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSendNewPassword", loginIdParameter);
        }
    
        public virtual int uspSendEmail(Nullable<int> requestedByUserId, string fromName, string fromEmailAddresses, string toEmailAddresses, string ccEmailAddresses, string bccEmailAddresses, string emailSubject, string emailContent, Nullable<bool> asapFlag, Nullable<System.DateTime> sendAfterDateTime, Nullable<int> emailServiceId, Nullable<int> organisationId, Nullable<bool> blindCopyToEmailAddress, Nullable<int> pendingEmailAttachmentId, Nullable<int> usingClientEmailTemplateId, Nullable<int> clientId)
        {
            var requestedByUserIdParameter = requestedByUserId.HasValue ?
                new ObjectParameter("requestedByUserId", requestedByUserId) :
                new ObjectParameter("requestedByUserId", typeof(int));
    
            var fromNameParameter = fromName != null ?
                new ObjectParameter("fromName", fromName) :
                new ObjectParameter("fromName", typeof(string));
    
            var fromEmailAddressesParameter = fromEmailAddresses != null ?
                new ObjectParameter("fromEmailAddresses", fromEmailAddresses) :
                new ObjectParameter("fromEmailAddresses", typeof(string));
    
            var toEmailAddressesParameter = toEmailAddresses != null ?
                new ObjectParameter("toEmailAddresses", toEmailAddresses) :
                new ObjectParameter("toEmailAddresses", typeof(string));
    
            var ccEmailAddressesParameter = ccEmailAddresses != null ?
                new ObjectParameter("ccEmailAddresses", ccEmailAddresses) :
                new ObjectParameter("ccEmailAddresses", typeof(string));
    
            var bccEmailAddressesParameter = bccEmailAddresses != null ?
                new ObjectParameter("bccEmailAddresses", bccEmailAddresses) :
                new ObjectParameter("bccEmailAddresses", typeof(string));
    
            var emailSubjectParameter = emailSubject != null ?
                new ObjectParameter("emailSubject", emailSubject) :
                new ObjectParameter("emailSubject", typeof(string));
    
            var emailContentParameter = emailContent != null ?
                new ObjectParameter("emailContent", emailContent) :
                new ObjectParameter("emailContent", typeof(string));
    
            var asapFlagParameter = asapFlag.HasValue ?
                new ObjectParameter("asapFlag", asapFlag) :
                new ObjectParameter("asapFlag", typeof(bool));
    
            var sendAfterDateTimeParameter = sendAfterDateTime.HasValue ?
                new ObjectParameter("sendAfterDateTime", sendAfterDateTime) :
                new ObjectParameter("sendAfterDateTime", typeof(System.DateTime));
    
            var emailServiceIdParameter = emailServiceId.HasValue ?
                new ObjectParameter("emailServiceId", emailServiceId) :
                new ObjectParameter("emailServiceId", typeof(int));
    
            var organisationIdParameter = organisationId.HasValue ?
                new ObjectParameter("organisationId", organisationId) :
                new ObjectParameter("organisationId", typeof(int));
    
            var blindCopyToEmailAddressParameter = blindCopyToEmailAddress.HasValue ?
                new ObjectParameter("blindCopyToEmailAddress", blindCopyToEmailAddress) :
                new ObjectParameter("blindCopyToEmailAddress", typeof(bool));
    
            var pendingEmailAttachmentIdParameter = pendingEmailAttachmentId.HasValue ?
                new ObjectParameter("PendingEmailAttachmentId", pendingEmailAttachmentId) :
                new ObjectParameter("PendingEmailAttachmentId", typeof(int));
    
            var usingClientEmailTemplateIdParameter = usingClientEmailTemplateId.HasValue ?
                new ObjectParameter("usingClientEmailTemplateId", usingClientEmailTemplateId) :
                new ObjectParameter("usingClientEmailTemplateId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSendEmail", requestedByUserIdParameter, fromNameParameter, fromEmailAddressesParameter, toEmailAddressesParameter, ccEmailAddressesParameter, bccEmailAddressesParameter, emailSubjectParameter, emailContentParameter, asapFlagParameter, sendAfterDateTimeParameter, emailServiceIdParameter, organisationIdParameter, blindCopyToEmailAddressParameter, pendingEmailAttachmentIdParameter, usingClientEmailTemplateIdParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spValidateLogin(string loginId, string password)
        {
            var loginIdParameter = loginId != null ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spValidateLogin", loginIdParameter, passwordParameter);
        }
    
        public virtual int usp_UpdateDataViewColumn1(Nullable<int> dataViewId, string dataViewName)
        {
            var dataViewIdParameter = dataViewId.HasValue ?
                new ObjectParameter("DataViewId", dataViewId) :
                new ObjectParameter("DataViewId", typeof(int));
    
            var dataViewNameParameter = dataViewName != null ?
                new ObjectParameter("DataViewName", dataViewName) :
                new ObjectParameter("DataViewName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateDataViewColumn1", dataViewIdParameter, dataViewNameParameter);
        }
    
        public virtual int uspArchiveEmails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspArchiveEmails");
        }
    
        public virtual int uspCheckDORSConnectionExpiry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckDORSConnectionExpiry");
        }
    
        public virtual int uspCreateMigrationConnectionToOldAtlasDB(string oldAtlasDatabaseName)
        {
            var oldAtlasDatabaseNameParameter = oldAtlasDatabaseName != null ?
                new ObjectParameter("OldAtlasDatabaseName", oldAtlasDatabaseName) :
                new ObjectParameter("OldAtlasDatabaseName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateMigrationConnectionToOldAtlasDB", oldAtlasDatabaseNameParameter);
        }
    
        public virtual int uspCreateMigrationExternalTables()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateMigrationExternalTables");
        }
    
        public virtual int uspDropColumnConstraints(string tableName, string columnName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDropColumnConstraints", tableNameParameter, columnNameParameter);
        }
    
        public virtual int uspDropMigrationConnectionToOldAtlasDB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDropMigrationConnectionToOldAtlasDB");
        }
    
        public virtual int uspDropMigrationExternalTables()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDropMigrationExternalTables");
        }
    
        public virtual int uspSendNewPassword(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSendNewPassword", userIdParameter);
        }
    
        public virtual int uspSendNewUserEmail(Nullable<int> clientId, Nullable<int> userId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSendNewUserEmail", clientIdParameter, userIdParameter);
        }
    
        public virtual int uspSetPassword(Nullable<int> userId, string password)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetPassword", userIdParameter, passwordParameter);
        }
    
        public virtual int uspUpdateDashboardMeter_DocumentSummary(Nullable<int> organisationId)
        {
            var organisationIdParameter = organisationId.HasValue ?
                new ObjectParameter("OrganisationId", organisationId) :
                new ObjectParameter("OrganisationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateDashboardMeter_DocumentSummary", organisationIdParameter);
        }
    
        public virtual int uspMonitorCourseBookings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMonitorCourseBookings");
        }
    
        public virtual int uspNewDORSAttendanceState(Nullable<int> newDORSAttendanceStateIdentifier, string tableName, Nullable<int> clientId, Nullable<int> courseId)
        {
            var newDORSAttendanceStateIdentifierParameter = newDORSAttendanceStateIdentifier.HasValue ?
                new ObjectParameter("NewDORSAttendanceStateIdentifier", newDORSAttendanceStateIdentifier) :
                new ObjectParameter("NewDORSAttendanceStateIdentifier", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspNewDORSAttendanceState", newDORSAttendanceStateIdentifierParameter, tableNameParameter, clientIdParameter, courseIdParameter);
        }
    
        public virtual int uspSendInternalMessage(Nullable<int> messageCategoryId, string messageTitle, string messageContent, Nullable<int> sendToOrganisationId, Nullable<int> sendToUserId, Nullable<int> createdByUserId, Nullable<bool> disabled, Nullable<bool> allUsers)
        {
            var messageCategoryIdParameter = messageCategoryId.HasValue ?
                new ObjectParameter("MessageCategoryId", messageCategoryId) :
                new ObjectParameter("MessageCategoryId", typeof(int));
    
            var messageTitleParameter = messageTitle != null ?
                new ObjectParameter("MessageTitle", messageTitle) :
                new ObjectParameter("MessageTitle", typeof(string));
    
            var messageContentParameter = messageContent != null ?
                new ObjectParameter("MessageContent", messageContent) :
                new ObjectParameter("MessageContent", typeof(string));
    
            var sendToOrganisationIdParameter = sendToOrganisationId.HasValue ?
                new ObjectParameter("SendToOrganisationId", sendToOrganisationId) :
                new ObjectParameter("SendToOrganisationId", typeof(int));
    
            var sendToUserIdParameter = sendToUserId.HasValue ?
                new ObjectParameter("SendToUserId", sendToUserId) :
                new ObjectParameter("SendToUserId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var disabledParameter = disabled.HasValue ?
                new ObjectParameter("Disabled", disabled) :
                new ObjectParameter("Disabled", typeof(bool));
    
            var allUsersParameter = allUsers.HasValue ?
                new ObjectParameter("AllUsers", allUsers) :
                new ObjectParameter("AllUsers", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSendInternalMessage", messageCategoryIdParameter, messageTitleParameter, messageContentParameter, sendToOrganisationIdParameter, sendToUserIdParameter, createdByUserIdParameter, disabledParameter, allUsersParameter);
        }
    
        public virtual int uspCheckUser(Nullable<int> userId, Nullable<int> clientId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckUser", userIdParameter, clientIdParameter);
        }
    
        public virtual int uspCreateEmailCourseReminders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateEmailCourseReminders");
        }
    
        public virtual int uspCreateSMSCourseReminders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateSMSCourseReminders");
        }
    
        public virtual int uspSendSMS(Nullable<int> requestedByUserId, string toPhoneNumber, string smsContent, string identifyingName, Nullable<int> identifyingId, string idType, Nullable<bool> asapFlag, Nullable<System.DateTime> sendAfterDateTime, Nullable<int> smsServiceId, Nullable<int> organisationId)
        {
            var requestedByUserIdParameter = requestedByUserId.HasValue ?
                new ObjectParameter("requestedByUserId", requestedByUserId) :
                new ObjectParameter("requestedByUserId", typeof(int));
    
            var toPhoneNumberParameter = toPhoneNumber != null ?
                new ObjectParameter("toPhoneNumber", toPhoneNumber) :
                new ObjectParameter("toPhoneNumber", typeof(string));
    
            var smsContentParameter = smsContent != null ?
                new ObjectParameter("smsContent", smsContent) :
                new ObjectParameter("smsContent", typeof(string));
    
            var identifyingNameParameter = identifyingName != null ?
                new ObjectParameter("IdentifyingName", identifyingName) :
                new ObjectParameter("IdentifyingName", typeof(string));
    
            var identifyingIdParameter = identifyingId.HasValue ?
                new ObjectParameter("IdentifyingId", identifyingId) :
                new ObjectParameter("IdentifyingId", typeof(int));
    
            var idTypeParameter = idType != null ?
                new ObjectParameter("IdType", idType) :
                new ObjectParameter("IdType", typeof(string));
    
            var asapFlagParameter = asapFlag.HasValue ?
                new ObjectParameter("asapFlag", asapFlag) :
                new ObjectParameter("asapFlag", typeof(bool));
    
            var sendAfterDateTimeParameter = sendAfterDateTime.HasValue ?
                new ObjectParameter("sendAfterDateTime", sendAfterDateTime) :
                new ObjectParameter("sendAfterDateTime", typeof(System.DateTime));
    
            var smsServiceIdParameter = smsServiceId.HasValue ?
                new ObjectParameter("smsServiceId", smsServiceId) :
                new ObjectParameter("smsServiceId", typeof(int));
    
            var organisationIdParameter = organisationId.HasValue ?
                new ObjectParameter("organisationId", organisationId) :
                new ObjectParameter("organisationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSendSMS", requestedByUserIdParameter, toPhoneNumberParameter, smsContentParameter, identifyingNameParameter, identifyingIdParameter, idTypeParameter, asapFlagParameter, sendAfterDateTimeParameter, smsServiceIdParameter, organisationIdParameter);
        }
    
        public virtual int uspUpdateSystemInformation(Nullable<int> systemFeatureItemId)
        {
            var systemFeatureItemIdParameter = systemFeatureItemId.HasValue ?
                new ObjectParameter("systemFeatureItemId", systemFeatureItemId) :
                new ObjectParameter("systemFeatureItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateSystemInformation", systemFeatureItemIdParameter);
        }
    
        public virtual int uspCreateUserLoginId(Nullable<int> userId, Nullable<int> clientId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateUserLoginId", userIdParameter, clientIdParameter);
        }
    
        public virtual int uspCourseReferenceGenerator(string referenceCode, Nullable<int> organisationId, string prefix, string suffix, string separator, string venueCode, string courseTypeCode, ObjectParameter returnMessage)
        {
            var referenceCodeParameter = referenceCode != null ?
                new ObjectParameter("referenceCode", referenceCode) :
                new ObjectParameter("referenceCode", typeof(string));
    
            var organisationIdParameter = organisationId.HasValue ?
                new ObjectParameter("organisationId", organisationId) :
                new ObjectParameter("organisationId", typeof(int));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("prefix", prefix) :
                new ObjectParameter("prefix", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("suffix", suffix) :
                new ObjectParameter("suffix", typeof(string));
    
            var separatorParameter = separator != null ?
                new ObjectParameter("separator", separator) :
                new ObjectParameter("separator", typeof(string));
    
            var venueCodeParameter = venueCode != null ?
                new ObjectParameter("venueCode", venueCode) :
                new ObjectParameter("venueCode", typeof(string));
    
            var courseTypeCodeParameter = courseTypeCode != null ?
                new ObjectParameter("courseTypeCode", courseTypeCode) :
                new ObjectParameter("courseTypeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCourseReferenceGenerator", referenceCodeParameter, organisationIdParameter, prefixParameter, suffixParameter, separatorParameter, venueCodeParameter, courseTypeCodeParameter, returnMessage);
        }
    
        public virtual int uspUniqueReferenceNumberForOrganisation(Nullable<int> organisationId, ObjectParameter referenceNumber)
        {
            var organisationIdParameter = organisationId.HasValue ?
                new ObjectParameter("organisationId", organisationId) :
                new ObjectParameter("organisationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUniqueReferenceNumberForOrganisation", organisationIdParameter, referenceNumber);
        }
    
        public virtual int uspRefreshClientQuickSearchData(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRefreshClientQuickSearchData", clientIdParameter);
        }
    
        public virtual int uspCreateCoursesFromCourseStencil(Nullable<int> courseStencilId)
        {
            var courseStencilIdParameter = courseStencilId.HasValue ?
                new ObjectParameter("CourseStencilId", courseStencilId) :
                new ObjectParameter("CourseStencilId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateCoursesFromCourseStencil", courseStencilIdParameter);
        }
    
        public virtual int uspRemoveCoursesFromCourseStencil(Nullable<int> courseStencilId)
        {
            var courseStencilIdParameter = courseStencilId.HasValue ?
                new ObjectParameter("CourseStencilId", courseStencilId) :
                new ObjectParameter("CourseStencilId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemoveCoursesFromCourseStencil", courseStencilIdParameter);
        }
    
        public virtual int uspCreateCourseClone(Nullable<int> courseCloneRequestId, Nullable<int> courseId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> courseReferenceGeneratorId, Nullable<bool> useSameReference, Nullable<bool> useSameTrainers)
        {
            var courseCloneRequestIdParameter = courseCloneRequestId.HasValue ?
                new ObjectParameter("courseCloneRequestId", courseCloneRequestId) :
                new ObjectParameter("courseCloneRequestId", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var courseReferenceGeneratorIdParameter = courseReferenceGeneratorId.HasValue ?
                new ObjectParameter("courseReferenceGeneratorId", courseReferenceGeneratorId) :
                new ObjectParameter("courseReferenceGeneratorId", typeof(int));
    
            var useSameReferenceParameter = useSameReference.HasValue ?
                new ObjectParameter("useSameReference", useSameReference) :
                new ObjectParameter("useSameReference", typeof(bool));
    
            var useSameTrainersParameter = useSameTrainers.HasValue ?
                new ObjectParameter("useSameTrainers", useSameTrainers) :
                new ObjectParameter("useSameTrainers", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateCourseClone", courseCloneRequestIdParameter, courseIdParameter, startDateParameter, endDateParameter, courseReferenceGeneratorIdParameter, useSameReferenceParameter, useSameTrainersParameter);
        }
    
        public virtual int uspInsertCourseDORSClientDataIfMissing(Nullable<int> courseId, Nullable<int> clientId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertCourseDORSClientDataIfMissing", courseIdParameter, clientIdParameter);
        }
    
        public virtual int uspUpdateTrainerVenueDistance(Nullable<int> trainerId, Nullable<int> venueId)
        {
            var trainerIdParameter = trainerId.HasValue ?
                new ObjectParameter("trainerId", trainerId) :
                new ObjectParameter("trainerId", typeof(int));
    
            var venueIdParameter = venueId.HasValue ?
                new ObjectParameter("venueId", venueId) :
                new ObjectParameter("venueId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateTrainerVenueDistance", trainerIdParameter, venueIdParameter);
        }
    
        public virtual int uspRotateToNextDORSConnectionAsDefault()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRotateToNextDORSConnectionAsDefault");
        }
    
        public virtual int uspRecordInProcessMonitor(string processName, Nullable<int> processIdentifier, string processComments)
        {
            var processNameParameter = processName != null ?
                new ObjectParameter("ProcessName", processName) :
                new ObjectParameter("ProcessName", typeof(string));
    
            var processIdentifierParameter = processIdentifier.HasValue ?
                new ObjectParameter("ProcessIdentifier", processIdentifier) :
                new ObjectParameter("ProcessIdentifier", typeof(int));
    
            var processCommentsParameter = processComments != null ?
                new ObjectParameter("ProcessComments", processComments) :
                new ObjectParameter("ProcessComments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRecordInProcessMonitor", processNameParameter, processIdentifierParameter, processCommentsParameter);
        }
    
        public virtual int uspDeleteOldArchivedEmails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteOldArchivedEmails");
        }
    
        public virtual int uspArchiveSMSs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspArchiveSMSs");
        }
    
        public virtual int uspDeleteOldArchivedSMSs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteOldArchivedSMSs");
        }
    
        public virtual int uspRemoveOldClientEmailChangeRequests()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemoveOldClientEmailChangeRequests");
        }
    
        public virtual int uspCourseTransferClient(Nullable<int> fromCourseId, Nullable<int> toCourseId, Nullable<int> fromClientId, Nullable<int> toClientId, string transferReason, Nullable<int> requestedByUserId)
        {
            var fromCourseIdParameter = fromCourseId.HasValue ?
                new ObjectParameter("fromCourseId", fromCourseId) :
                new ObjectParameter("fromCourseId", typeof(int));
    
            var toCourseIdParameter = toCourseId.HasValue ?
                new ObjectParameter("toCourseId", toCourseId) :
                new ObjectParameter("toCourseId", typeof(int));
    
            var fromClientIdParameter = fromClientId.HasValue ?
                new ObjectParameter("fromClientId", fromClientId) :
                new ObjectParameter("fromClientId", typeof(int));
    
            var toClientIdParameter = toClientId.HasValue ?
                new ObjectParameter("toClientId", toClientId) :
                new ObjectParameter("toClientId", typeof(int));
    
            var transferReasonParameter = transferReason != null ?
                new ObjectParameter("transferReason", transferReason) :
                new ObjectParameter("transferReason", typeof(string));
    
            var requestedByUserIdParameter = requestedByUserId.HasValue ?
                new ObjectParameter("requestedByUserId", requestedByUserId) :
                new ObjectParameter("requestedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCourseTransferClient", fromCourseIdParameter, toCourseIdParameter, fromClientIdParameter, toClientIdParameter, transferReasonParameter, requestedByUserIdParameter);
        }
    
        public virtual int uspCalculateLastBookingDate(Nullable<int> courseId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCalculateLastBookingDate", courseIdParameter);
        }
    
        public virtual int uspLinkTrainersToSameDORSSchemeAcrossCourseTypes(Nullable<int> courseTypeId, Nullable<int> trainerId)
        {
            var courseTypeIdParameter = courseTypeId.HasValue ?
                new ObjectParameter("courseTypeId", courseTypeId) :
                new ObjectParameter("courseTypeId", typeof(int));
    
            var trainerIdParameter = trainerId.HasValue ?
                new ObjectParameter("trainerId", trainerId) :
                new ObjectParameter("trainerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLinkTrainersToSameDORSSchemeAcrossCourseTypes", courseTypeIdParameter, trainerIdParameter);
        }
    
        public virtual int uspLogTriggerRunning(string tableName, string triggerName, Nullable<int> insertedTableRows, Nullable<int> deletedTableRows)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var triggerNameParameter = triggerName != null ?
                new ObjectParameter("TriggerName", triggerName) :
                new ObjectParameter("TriggerName", typeof(string));
    
            var insertedTableRowsParameter = insertedTableRows.HasValue ?
                new ObjectParameter("InsertedTableRows", insertedTableRows) :
                new ObjectParameter("InsertedTableRows", typeof(int));
    
            var deletedTableRowsParameter = deletedTableRows.HasValue ?
                new ObjectParameter("DeletedTableRows", deletedTableRows) :
                new ObjectParameter("DeletedTableRows", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogTriggerRunning", tableNameParameter, triggerNameParameter, insertedTableRowsParameter, deletedTableRowsParameter);
        }
    
        public virtual int uspUnlockClientsWhereLockExceedsSetting()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUnlockClientsWhereLockExceedsSetting");
        }
    
        public virtual int uspEnsureTrainerLimitationAndSummaryDataSetup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEnsureTrainerLimitationAndSummaryDataSetup");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int uspUpdateTrainerSummaryForMonth(Nullable<int> trainerId, Nullable<int> year, Nullable<int> month)
        {
            var trainerIdParameter = trainerId.HasValue ?
                new ObjectParameter("trainerId", trainerId) :
                new ObjectParameter("trainerId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateTrainerSummaryForMonth", trainerIdParameter, yearParameter, monthParameter);
        }
    
        public virtual int uspUpdateTrainerDistancesForAttachedVenues(Nullable<int> trainerId)
        {
            var trainerIdParameter = trainerId.HasValue ?
                new ObjectParameter("TrainerId", trainerId) :
                new ObjectParameter("TrainerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateTrainerDistancesForAttachedVenues", trainerIdParameter);
        }
    
        public virtual int uspUpdateVenueTrainerDistancesForAttachedTrainers(Nullable<int> venueId)
        {
            var venueIdParameter = venueId.HasValue ?
                new ObjectParameter("VenueId", venueId) :
                new ObjectParameter("VenueId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateVenueTrainerDistancesForAttachedTrainers", venueIdParameter);
        }
    
        public virtual int uspCreateCourseDocumentRequest(Nullable<int> courseId, Nullable<int> courseDocumentRequestTypeId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var courseDocumentRequestTypeIdParameter = courseDocumentRequestTypeId.HasValue ?
                new ObjectParameter("courseDocumentRequestTypeId", courseDocumentRequestTypeId) :
                new ObjectParameter("courseDocumentRequestTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateCourseDocumentRequest", courseIdParameter, courseDocumentRequestTypeIdParameter);
        }
    
        public virtual int uspCourseSessionAllocationRefreshDefault(Nullable<int> courseId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCourseSessionAllocationRefreshDefault", courseIdParameter);
        }
    
        public virtual int uspEnsureOrganisationalData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEnsureOrganisationalData");
        }
    
        public virtual int uspClientEnsureUppercaseStart(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClientEnsureUppercaseStart", clientIdParameter);
        }
    
        public virtual int uspDatabaseTidyUpProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDatabaseTidyUpProcess");
        }
    
        public virtual int uspClientLicenceToBirthdayValidation(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClientLicenceToBirthdayValidation", clientIdParameter);
        }
    
        public virtual int uspClientLicenceToBirthdayValidation_SubProcedure(Nullable<int> clientId, string licenceNumber)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            var licenceNumberParameter = licenceNumber != null ?
                new ObjectParameter("licenceNumber", licenceNumber) :
                new ObjectParameter("licenceNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClientLicenceToBirthdayValidation_SubProcedure", clientIdParameter, licenceNumberParameter);
        }
    
        public virtual int uspSendRefundRequestNotification(Nullable<int> refundRequestId)
        {
            var refundRequestIdParameter = refundRequestId.HasValue ?
                new ObjectParameter("refundRequestId", refundRequestId) :
                new ObjectParameter("refundRequestId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSendRefundRequestNotification", refundRequestIdParameter);
        }
    
        public virtual int uspSendRefundRequestNotificationReminder(Nullable<int> refundRequestId)
        {
            var refundRequestIdParameter = refundRequestId.HasValue ?
                new ObjectParameter("refundRequestId", refundRequestId) :
                new ObjectParameter("refundRequestId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSendRefundRequestNotificationReminder", refundRequestIdParameter);
        }
    
        public virtual int uspEnsureTaskActionForOrganisation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEnsureTaskActionForOrganisation");
        }
    
        public virtual int uspCreateTaskByTaskAction(Nullable<int> organisationId, string taskActionName, string taskTitle, Nullable<int> taskCategoryId, Nullable<int> userId, Nullable<System.DateTime> deadlineDate, Nullable<int> taskRelatedToClientId, Nullable<int> taskRelatedToCourseId, Nullable<int> taskRelatedToTrainerId, string taskNote)
        {
            var organisationIdParameter = organisationId.HasValue ?
                new ObjectParameter("OrganisationId", organisationId) :
                new ObjectParameter("OrganisationId", typeof(int));
    
            var taskActionNameParameter = taskActionName != null ?
                new ObjectParameter("TaskActionName", taskActionName) :
                new ObjectParameter("TaskActionName", typeof(string));
    
            var taskTitleParameter = taskTitle != null ?
                new ObjectParameter("TaskTitle", taskTitle) :
                new ObjectParameter("TaskTitle", typeof(string));
    
            var taskCategoryIdParameter = taskCategoryId.HasValue ?
                new ObjectParameter("TaskCategoryId", taskCategoryId) :
                new ObjectParameter("TaskCategoryId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var deadlineDateParameter = deadlineDate.HasValue ?
                new ObjectParameter("DeadlineDate", deadlineDate) :
                new ObjectParameter("DeadlineDate", typeof(System.DateTime));
    
            var taskRelatedToClientIdParameter = taskRelatedToClientId.HasValue ?
                new ObjectParameter("TaskRelatedToClientId", taskRelatedToClientId) :
                new ObjectParameter("TaskRelatedToClientId", typeof(int));
    
            var taskRelatedToCourseIdParameter = taskRelatedToCourseId.HasValue ?
                new ObjectParameter("TaskRelatedToCourseId", taskRelatedToCourseId) :
                new ObjectParameter("TaskRelatedToCourseId", typeof(int));
    
            var taskRelatedToTrainerIdParameter = taskRelatedToTrainerId.HasValue ?
                new ObjectParameter("TaskRelatedToTrainerId", taskRelatedToTrainerId) :
                new ObjectParameter("TaskRelatedToTrainerId", typeof(int));
    
            var taskNoteParameter = taskNote != null ?
                new ObjectParameter("TaskNote", taskNote) :
                new ObjectParameter("TaskNote", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateTaskByTaskAction", organisationIdParameter, taskActionNameParameter, taskTitleParameter, taskCategoryIdParameter, userIdParameter, deadlineDateParameter, taskRelatedToClientIdParameter, taskRelatedToCourseIdParameter, taskRelatedToTrainerIdParameter, taskNoteParameter);
        }
    
        public virtual int uspSetCourseProfileLockedIfRequired(Nullable<int> courseId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetCourseProfileLockedIfRequired", courseIdParameter);
        }
    
        public virtual int uspCourseTransferClientWithNotes(Nullable<int> fromCourseId, Nullable<int> toCourseId, Nullable<int> fromClientId, Nullable<int> toClientId, string transferReason, Nullable<int> requestedByUserId, string notes)
        {
            var fromCourseIdParameter = fromCourseId.HasValue ?
                new ObjectParameter("fromCourseId", fromCourseId) :
                new ObjectParameter("fromCourseId", typeof(int));
    
            var toCourseIdParameter = toCourseId.HasValue ?
                new ObjectParameter("toCourseId", toCourseId) :
                new ObjectParameter("toCourseId", typeof(int));
    
            var fromClientIdParameter = fromClientId.HasValue ?
                new ObjectParameter("fromClientId", fromClientId) :
                new ObjectParameter("fromClientId", typeof(int));
    
            var toClientIdParameter = toClientId.HasValue ?
                new ObjectParameter("toClientId", toClientId) :
                new ObjectParameter("toClientId", typeof(int));
    
            var transferReasonParameter = transferReason != null ?
                new ObjectParameter("transferReason", transferReason) :
                new ObjectParameter("transferReason", typeof(string));
    
            var requestedByUserIdParameter = requestedByUserId.HasValue ?
                new ObjectParameter("requestedByUserId", requestedByUserId) :
                new ObjectParameter("requestedByUserId", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCourseTransferClientWithNotes", fromCourseIdParameter, toCourseIdParameter, fromClientIdParameter, toClientIdParameter, transferReasonParameter, requestedByUserIdParameter, notesParameter);
        }
    
        public virtual int uspUpdateDataViewColumn(string dataViewName)
        {
            var dataViewNameParameter = dataViewName != null ?
                new ObjectParameter("DataViewName", dataViewName) :
                new ObjectParameter("DataViewName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateDataViewColumn", dataViewNameParameter);
        }
    
        public virtual int uspGetReportData(Nullable<int> reportRequestId)
        {
            var reportRequestIdParameter = reportRequestId.HasValue ?
                new ObjectParameter("ReportRequestId", reportRequestId) :
                new ObjectParameter("ReportRequestId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetReportData", reportRequestIdParameter);
        }
    
        public virtual int uspDashboardDataRefresh()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDashboardDataRefresh");
        }
    
        public virtual int uspSaveDatabaseError(string procedureName, string errorMessage, Nullable<int> errorNumber, Nullable<int> errorSeverity, Nullable<int> errorState, string errorProcedure, Nullable<int> errorLine)
        {
            var procedureNameParameter = procedureName != null ?
                new ObjectParameter("ProcedureName", procedureName) :
                new ObjectParameter("ProcedureName", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            var errorNumberParameter = errorNumber.HasValue ?
                new ObjectParameter("ErrorNumber", errorNumber) :
                new ObjectParameter("ErrorNumber", typeof(int));
    
            var errorSeverityParameter = errorSeverity.HasValue ?
                new ObjectParameter("ErrorSeverity", errorSeverity) :
                new ObjectParameter("ErrorSeverity", typeof(int));
    
            var errorStateParameter = errorState.HasValue ?
                new ObjectParameter("ErrorState", errorState) :
                new ObjectParameter("ErrorState", typeof(int));
    
            var errorProcedureParameter = errorProcedure != null ?
                new ObjectParameter("ErrorProcedure", errorProcedure) :
                new ObjectParameter("ErrorProcedure", typeof(string));
    
            var errorLineParameter = errorLine.HasValue ?
                new ObjectParameter("ErrorLine", errorLine) :
                new ObjectParameter("ErrorLine", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveDatabaseError", procedureNameParameter, errorMessageParameter, errorNumberParameter, errorSeverityParameter, errorStateParameter, errorProcedureParameter, errorLineParameter);
        }
    
        public virtual int uspRunSystemStoredProceduresPeriodically()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRunSystemStoredProceduresPeriodically");
        }
    
        public virtual int uspUpdateLastRunLog(string processName, string errorMessage)
        {
            var processNameParameter = processName != null ?
                new ObjectParameter("ProcessName", processName) :
                new ObjectParameter("ProcessName", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateLastRunLog", processNameParameter, errorMessageParameter);
        }
    
        public virtual int uspEnsureDefaultAdminMenuAssignments(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEnsureDefaultAdminMenuAssignments", userIdParameter);
        }
    
        public virtual int uspSetCoursePaymentDueDateIfRequired(Nullable<int> courseId, Nullable<int> clientId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetCoursePaymentDueDateIfRequired", courseIdParameter, clientIdParameter);
        }
    
        public virtual int uspEnsureDefaultMeterAssignments(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEnsureDefaultMeterAssignments", userIdParameter);
        }
    
        [DbFunction("Atlas_DevEntities", "udfSplitStringUsingCustomSeparator")]
        public virtual IQueryable<string> udfSplitStringUsingCustomSeparator(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[Atlas_DevEntities].[udfSplitStringUsingCustomSeparator](@Input, @Character)", inputParameter, characterParameter);
        }
    
        public virtual int uspGetSelectedColumnsFromViewForKey(string viewName, string selectedColumnNames, string keyName, Nullable<int> keyValue, Nullable<long> processRequestId, Nullable<System.DateTime> processRequestDateTime)
        {
            var viewNameParameter = viewName != null ?
                new ObjectParameter("viewName", viewName) :
                new ObjectParameter("viewName", typeof(string));
    
            var selectedColumnNamesParameter = selectedColumnNames != null ?
                new ObjectParameter("selectedColumnNames", selectedColumnNames) :
                new ObjectParameter("selectedColumnNames", typeof(string));
    
            var keyNameParameter = keyName != null ?
                new ObjectParameter("keyName", keyName) :
                new ObjectParameter("keyName", typeof(string));
    
            var keyValueParameter = keyValue.HasValue ?
                new ObjectParameter("keyValue", keyValue) :
                new ObjectParameter("keyValue", typeof(int));
    
            var processRequestIdParameter = processRequestId.HasValue ?
                new ObjectParameter("processRequestId", processRequestId) :
                new ObjectParameter("processRequestId", typeof(long));
    
            var processRequestDateTimeParameter = processRequestDateTime.HasValue ?
                new ObjectParameter("processRequestDateTime", processRequestDateTime) :
                new ObjectParameter("processRequestDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetSelectedColumnsFromViewForKey", viewNameParameter, selectedColumnNamesParameter, keyNameParameter, keyValueParameter, processRequestIdParameter, processRequestDateTimeParameter);
        }
    
        public virtual int uspSendCancelledRefundRequestNotification(Nullable<int> refundRequestId, string cancellationReason)
        {
            var refundRequestIdParameter = refundRequestId.HasValue ?
                new ObjectParameter("refundRequestId", refundRequestId) :
                new ObjectParameter("refundRequestId", typeof(int));
    
            var cancellationReasonParameter = cancellationReason != null ?
                new ObjectParameter("cancellationReason", cancellationReason) :
                new ObjectParameter("cancellationReason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSendCancelledRefundRequestNotification", refundRequestIdParameter, cancellationReasonParameter);
        }
    
        public virtual int uspCancelRefundRequest(Nullable<int> refundRequestId, Nullable<int> userId)
        {
            var refundRequestIdParameter = refundRequestId.HasValue ?
                new ObjectParameter("refundRequestId", refundRequestId) :
                new ObjectParameter("refundRequestId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCancelRefundRequest", refundRequestIdParameter, userIdParameter);
        }
    
        public virtual int uspCancelOldUnprocessedRefundRequests()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCancelOldUnprocessedRefundRequests");
        }
    
        public virtual int uspInsertCourseTrainerReference(Nullable<int> organisationId, Nullable<int> courseId, Nullable<int> trainerId)
        {
            var organisationIdParameter = organisationId.HasValue ?
                new ObjectParameter("organisationId", organisationId) :
                new ObjectParameter("organisationId", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var trainerIdParameter = trainerId.HasValue ?
                new ObjectParameter("trainerId", trainerId) :
                new ObjectParameter("trainerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertCourseTrainerReference", organisationIdParameter, courseIdParameter, trainerIdParameter);
        }
    
        public virtual int uspInsertCourseInterpreterReference(Nullable<int> organisationId, Nullable<int> courseId, Nullable<int> interpreterId)
        {
            var organisationIdParameter = organisationId.HasValue ?
                new ObjectParameter("organisationId", organisationId) :
                new ObjectParameter("organisationId", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var interpreterIdParameter = interpreterId.HasValue ?
                new ObjectParameter("interpreterId", interpreterId) :
                new ObjectParameter("interpreterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertCourseInterpreterReference", organisationIdParameter, courseIdParameter, interpreterIdParameter);
        }
    
        public virtual int uspSendClientSpecialRequirementsOutstandingNotification(Nullable<int> organisationId, Nullable<int> clientId, string clientDisplayName, string specialRequirements)
        {
            var organisationIdParameter = organisationId.HasValue ?
                new ObjectParameter("organisationId", organisationId) :
                new ObjectParameter("organisationId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            var clientDisplayNameParameter = clientDisplayName != null ?
                new ObjectParameter("clientDisplayName", clientDisplayName) :
                new ObjectParameter("clientDisplayName", typeof(string));
    
            var specialRequirementsParameter = specialRequirements != null ?
                new ObjectParameter("specialRequirements", specialRequirements) :
                new ObjectParameter("specialRequirements", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSendClientSpecialRequirementsOutstandingNotification", organisationIdParameter, clientIdParameter, clientDisplayNameParameter, specialRequirementsParameter);
        }
    
        public virtual int uspCourseToggleClientAttendance(Nullable<int> courseId, Nullable<int> clientId, Nullable<int> createdByUserId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("createdByUserId", createdByUserId) :
                new ObjectParameter("createdByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCourseToggleClientAttendance", courseIdParameter, clientIdParameter, createdByUserIdParameter);
        }
    
        public virtual int uspRefreshClientQuickSearchData_RefreshAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRefreshClientQuickSearchData_RefreshAll");
        }
    
        public virtual int uspCourseClientAttendanceMarkAllAbsent(Nullable<int> courseId, Nullable<int> requestedByUserId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var requestedByUserIdParameter = requestedByUserId.HasValue ?
                new ObjectParameter("requestedByUserId", requestedByUserId) :
                new ObjectParameter("requestedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCourseClientAttendanceMarkAllAbsent", courseIdParameter, requestedByUserIdParameter);
        }
    
        public virtual int uspCourseClientAttendanceMarkAllPresent(Nullable<int> courseId, Nullable<int> requestedByUserId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var requestedByUserIdParameter = requestedByUserId.HasValue ?
                new ObjectParameter("requestedByUserId", requestedByUserId) :
                new ObjectParameter("requestedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCourseClientAttendanceMarkAllPresent", courseIdParameter, requestedByUserIdParameter);
        }
    
        public virtual int uspDashboardDataRefresh_Client()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDashboardDataRefresh_Client");
        }
    
        public virtual int uspDashboardDataRefresh_Course()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDashboardDataRefresh_Course");
        }
    
        public virtual int uspDashboardDataRefresh_DocumentStat()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDashboardDataRefresh_DocumentStat");
        }
    
        public virtual int uspDashboardDataRefresh_DORSOfferWithdrawn()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDashboardDataRefresh_DORSOfferWithdrawn");
        }
    
        public virtual int uspDashboardDataRefresh_Email()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDashboardDataRefresh_Email");
        }
    
        public virtual int uspDashboardDataRefresh_OnlineClientsSpecialRequirement()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDashboardDataRefresh_OnlineClientsSpecialRequirement");
        }
    
        public virtual int uspDashboardDataRefresh_Payment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDashboardDataRefresh_Payment");
        }
    
        public virtual int uspDashboardDataRefresh_UnpaidBookedCourse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDashboardDataRefresh_UnpaidBookedCourse");
        }
    
        public virtual int uspAllocateUnallocatedEmailToClient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAllocateUnallocatedEmailToClient");
        }
    
        public virtual int uspEnsureReferringAuthoritySetForClient(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEnsureReferringAuthoritySetForClient", clientIdParameter);
        }
    
        public virtual int uspSendEmailContentToAllSystemAdmins(Nullable<int> requestedByUserId, string emailSubject, string emailContent)
        {
            var requestedByUserIdParameter = requestedByUserId.HasValue ?
                new ObjectParameter("requestedByUserId", requestedByUserId) :
                new ObjectParameter("requestedByUserId", typeof(int));
    
            var emailSubjectParameter = emailSubject != null ?
                new ObjectParameter("EmailSubject", emailSubject) :
                new ObjectParameter("EmailSubject", typeof(string));
    
            var emailContentParameter = emailContent != null ?
                new ObjectParameter("EmailContent", emailContent) :
                new ObjectParameter("EmailContent", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSendEmailContentToAllSystemAdmins", requestedByUserIdParameter, emailSubjectParameter, emailContentParameter);
        }
    
        public virtual int uspCheckForDuplicateClientsNotifySystemAdmins()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckForDuplicateClientsNotifySystemAdmins");
        }
    
        public virtual ObjectResult<uspGetCourseDORSTrainerIdentifiersAndLicenceTypes_Result> uspGetCourseDORSTrainerIdentifiersAndLicenceTypes(Nullable<int> courseId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCourseDORSTrainerIdentifiersAndLicenceTypes_Result>("uspGetCourseDORSTrainerIdentifiersAndLicenceTypes", courseIdParameter);
        }
    
        public virtual int uspCreateAndSendTrainerBookingConfirmation(Nullable<int> courseId, Nullable<int> trainerId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var trainerIdParameter = trainerId.HasValue ?
                new ObjectParameter("trainerId", trainerId) :
                new ObjectParameter("trainerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateAndSendTrainerBookingConfirmation", courseIdParameter, trainerIdParameter);
        }
    
        public virtual int uspCreateAndSendTrainerCancellationConfirmation(Nullable<int> courseId, Nullable<int> trainerId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var trainerIdParameter = trainerId.HasValue ?
                new ObjectParameter("trainerId", trainerId) :
                new ObjectParameter("trainerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateAndSendTrainerCancellationConfirmation", courseIdParameter, trainerIdParameter);
        }
    
        public virtual int uspDashboardDataRefresh_UnableToUpdateInDORS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDashboardDataRefresh_UnableToUpdateInDORS");
        }
    
        public virtual int uspDashboardDataRefresh_AttendanceNotUploadedToDORS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDashboardDataRefresh_AttendanceNotUploadedToDORS");
        }
    
        public virtual int uspMarkForDeletionRecentlyCreatedDuplicates(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMarkForDeletionRecentlyCreatedDuplicates", clientIdParameter);
        }
    
        public virtual int uspSavePaymentErrorInformation(Nullable<int> orgId, Nullable<int> eventUserId, Nullable<int> clientId, Nullable<int> courseId, Nullable<decimal> paymentAmount, string paymentName, string paymentProvider, string paymentProviderResponseInf, string otherInf)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("orgId", orgId) :
                new ObjectParameter("orgId", typeof(int));
    
            var eventUserIdParameter = eventUserId.HasValue ?
                new ObjectParameter("eventUserId", eventUserId) :
                new ObjectParameter("eventUserId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var paymentAmountParameter = paymentAmount.HasValue ?
                new ObjectParameter("paymentAmount", paymentAmount) :
                new ObjectParameter("paymentAmount", typeof(decimal));
    
            var paymentNameParameter = paymentName != null ?
                new ObjectParameter("paymentName", paymentName) :
                new ObjectParameter("paymentName", typeof(string));
    
            var paymentProviderParameter = paymentProvider != null ?
                new ObjectParameter("paymentProvider", paymentProvider) :
                new ObjectParameter("paymentProvider", typeof(string));
    
            var paymentProviderResponseInfParameter = paymentProviderResponseInf != null ?
                new ObjectParameter("paymentProviderResponseInf", paymentProviderResponseInf) :
                new ObjectParameter("paymentProviderResponseInf", typeof(string));
    
            var otherInfParameter = otherInf != null ?
                new ObjectParameter("otherInf", otherInf) :
                new ObjectParameter("otherInf", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSavePaymentErrorInformation", orgIdParameter, eventUserIdParameter, clientIdParameter, courseIdParameter, paymentAmountParameter, paymentNameParameter, paymentProviderParameter, paymentProviderResponseInfParameter, otherInfParameter);
        }
    
        public virtual int uspInsertAnyMissingClientPaymentData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertAnyMissingClientPaymentData");
        }
    
        public virtual int uspValidateLogin(string loginId, string password, ObjectParameter userId, ObjectParameter validCredentials)
        {
            var loginIdParameter = loginId != null ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspValidateLogin", loginIdParameter, passwordParameter, userId, validCredentials);
        }
    
        public virtual ObjectResult<uspGetDORSForceContract_Result> uspGetDORSForceContract(Nullable<int> courseTypeId, Nullable<int> venueId, Nullable<System.DateTime> courseStartDate)
        {
            var courseTypeIdParameter = courseTypeId.HasValue ?
                new ObjectParameter("courseTypeId", courseTypeId) :
                new ObjectParameter("courseTypeId", typeof(int));
    
            var venueIdParameter = venueId.HasValue ?
                new ObjectParameter("venueId", venueId) :
                new ObjectParameter("venueId", typeof(int));
    
            var courseStartDateParameter = courseStartDate.HasValue ?
                new ObjectParameter("courseStartDate", courseStartDate) :
                new ObjectParameter("courseStartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetDORSForceContract_Result>("uspGetDORSForceContract", courseTypeIdParameter, venueIdParameter, courseStartDateParameter);
        }
    
        public virtual int uspRecordBookingAttempt(string licenceNumber, string browser, string operatingSystem, string ipAddress)
        {
            var licenceNumberParameter = licenceNumber != null ?
                new ObjectParameter("licenceNumber", licenceNumber) :
                new ObjectParameter("licenceNumber", typeof(string));
    
            var browserParameter = browser != null ?
                new ObjectParameter("browser", browser) :
                new ObjectParameter("browser", typeof(string));
    
            var operatingSystemParameter = operatingSystem != null ?
                new ObjectParameter("operatingSystem", operatingSystem) :
                new ObjectParameter("operatingSystem", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRecordBookingAttempt", licenceNumberParameter, browserParameter, operatingSystemParameter, ipAddressParameter);
        }
    
        public virtual int uspSendEmailContentToAllOrganisationSupport(Nullable<int> organisationId, Nullable<int> requestedByUserId, string emailSubject, string emailContent)
        {
            var organisationIdParameter = organisationId.HasValue ?
                new ObjectParameter("organisationId", organisationId) :
                new ObjectParameter("organisationId", typeof(int));
    
            var requestedByUserIdParameter = requestedByUserId.HasValue ?
                new ObjectParameter("requestedByUserId", requestedByUserId) :
                new ObjectParameter("requestedByUserId", typeof(int));
    
            var emailSubjectParameter = emailSubject != null ?
                new ObjectParameter("EmailSubject", emailSubject) :
                new ObjectParameter("EmailSubject", typeof(string));
    
            var emailContentParameter = emailContent != null ?
                new ObjectParameter("EmailContent", emailContent) :
                new ObjectParameter("EmailContent", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSendEmailContentToAllOrganisationSupport", organisationIdParameter, requestedByUserIdParameter, emailSubjectParameter, emailContentParameter);
        }
    
        public virtual int uspVenuesWithNoRegionAssigned()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspVenuesWithNoRegionAssigned");
        }
    
        public virtual int uspRefreshReconciliationData(Nullable<int> reconciliationId)
        {
            var reconciliationIdParameter = reconciliationId.HasValue ?
                new ObjectParameter("ReconciliationId", reconciliationId) :
                new ObjectParameter("ReconciliationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRefreshReconciliationData", reconciliationIdParameter);
        }
    }
}
